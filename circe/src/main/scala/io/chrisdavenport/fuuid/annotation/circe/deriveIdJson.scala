package io.chrisdavenport.fuuid.annotation.circe

import scala.annotation.{compileTimeOnly, StaticAnnotation}
import scala.reflect.macros.whitebox

/**
 * This annotation can be used on objects annotated with `deriveId`
 * to automatically derive implicit
 * [[http://git.io/fjFqC circe's Encoder and Decoder]]
 * instances for the generated `Id` type (an implicit `Encoder[FUUID]`
 * and `Decoder[FUUID]` will be required, it can be provided via `fuuid-circe`).
 *
 * @example For an object named `User` {{{
 * @deriveId @deriveIdJson
 * object User {
 *
 *    //Methods, types and objects generated by `deriveId`
 *    ...
 *
 *    implicit val IdEncoderInstance: Encoder[User.Id] = ???
 *
 *    implicit val IdDecoderInstance: Decoder[User.Id] = ???
 *
 * }
 * }}}
 */
@compileTimeOnly("enable macro paradise to expand macro annotations")
class deriveIdJson extends StaticAnnotation {
  def macroTransform(annottees: Any*): Any = macro deriveIdJsonMacros.impl
}

object deriveIdJsonMacros {

  @SuppressWarnings(
    Array(
      "org.wartremover.warts.Any",
      "org.wartremover.warts.Nothing",
      "org.wartremover.warts.PublicInference"
    ))
  def impl(c: whitebox.Context)(annottees: c.Expr[Any]*): c.Expr[Any] = {
    import c.universe._

    val (mods, name, parents, body) = (annottees map (_.tree)).headOption collect {
      case q"$mods object $name extends ..$parents { ..$body }" => (mods, name, parents, body)
    } getOrElse c.abort(c.enclosingPosition, "@deriveIdJson can only be used with objects")

    c.Expr[Any](q"""
      $mods object $name extends ..$parents {

        @SuppressWarnings(Array("org.wartremover.warts.PublicInference"))
        implicit val IdEncoderInstance: _root_.io.circe.Encoder[$name.Id] =
          implicitly[_root_.io.circe.Encoder[_root_.io.chrisdavenport.fuuid.FUUID]].contramap(identity)


        @SuppressWarnings(Array("org.wartremover.warts.PublicInference"))
        implicit val IdDecoderInstance: _root_.io.circe.Decoder[$name.Id] =
          implicitly[_root_.io.circe.Decoder[_root_.io.chrisdavenport.fuuid.FUUID]].map($name.Id.apply)

        ..$body
      }
    """)
  }
}
